# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_api.ipynb.

# %% auto 0
__all__ = ['PINGME_CONFIG_PATH', 'config', 'WEBHOOK_URL', 'EMAIL_FROM', 'EMAIL_TO', 'SMTP_HOST', 'SMTP_PORT', 'SMTP_USER',
           'SMTP_PASSWORD', 'LOG_FILE', 'TITLE', 'TEXT', 'CARD_DIR', 'CARD_FILE', 'CARD_EXT', 'CARD_CONTEXT',
           'SEND_EMAIL', 'SEND_WEBHOOK', 'SEND_LOG_FILE', 'app', 'read_main', 'send_to_webhook', 'send_to_email',
           'send_to_logfile', 'web_service']

# %% ../01_api.ipynb 5
# Imports required for package
from .core import Card, PingMe

# %% ../01_api.ipynb 8
from .core import get_config
import os
PINGME_CONFIG_PATH = os.environ.get("PINGME_CONFIG_PATH")
config = get_config(PINGME_CONFIG_PATH)

import distutils
import json
WEBHOOK_URL = config['PINGME_WEBHOOK_URL']
EMAIL_FROM = config['PINGME_EMAIL_FROM']
EMAIL_TO = config['PINGME_EMAIL_TO']
SMTP_HOST = config['PINGME_SMTP_HOST']
SMTP_PORT = config['PINGME_SMTP_PORT']
SMTP_USER = config['PINGME_SMTP_USER']
SMTP_PASSWORD = config['PINGME_SMTP_PASSWORD']
LOG_FILE = config['PINGME_LOG_FILE']
TITLE = config['PINGME_TITLE']
TEXT = config['PINGME_TEXT']
CARD_DIR = config['PINGME_CARD_DIR']
CARD_FILE = config['PINGME_CARD_FILE']
CARD_EXT = config['PINGME_CARD_EXT']
CARD_CONTEXT = json.loads(config['PINGME_CARD_CONTEXT'])
SEND_EMAIL = distutils.util.strtobool(config['PINGME_SEND_EMAIL'])
SEND_WEBHOOK = distutils.util.strtobool(config['PINGME_SEND_WEBHOOK'])
SEND_LOG_FILE = distutils.util.strtobool(config['PINGME_SEND_LOG_FILE'])

# %% ../01_api.ipynb 10
import uvicorn
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    return {"msg": "Hello World"}

# %% ../01_api.ipynb 12
from fastapi import HTTPException
@app.post("/webhook")
async def send_to_webhook(card: Card):
    try:
        notification = PingMe(card, CARD_DIR, CARD_EXT)
        response = notification.send_to_webhook(WEBHOOK_URL)
    except Exception as e:
        raise HTTPException(status_code=404, detail="Error in getting or sending card")
    return response

# %% ../01_api.ipynb 15
from fastapi import HTTPException
@app.post("/email")
async def send_to_email(card: Card):
    try:
        notification = PingMe(card, CARD_DIR, CARD_EXT)
        response = notification.send_to_email(EMAIL_FROM, EMAIL_TO, SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASSWORD)
    except Exception as e:
        raise HTTPException(status_code=404, detail=f"Error in getting or sending card {e}")
    return response

# %% ../01_api.ipynb 17
from fastapi import HTTPException
@app.post("/logfile")
async def send_to_logfile(card: Card):
    try:
        notification = PingMe(card, CARD_DIR, CARD_EXT)
        response = notification.send_to_log_file(LOG_FILE)
    except Exception as e:
        raise HTTPException(status_code=404, detail="Error in getting or sending card")
    return response

# %% ../01_api.ipynb 19
def web_service():
    uvicorn.run(app)
