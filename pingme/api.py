# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_api.ipynb.

# %% auto 0
__all__ = ['PINGME_ENV_CARD_NAME', 'PINGME_ENV_CARD_CONTEXT', 'PINGME_ENV_CARD_DIR', 'PINGME_ENV_CARD_EXT', 'SEND_EMAIL',
           'SEND_WEBHOOK', 'SEND_LOGFILE', 'app', 'read_main', 'send_webhook', 'send_email', 'send_logfile',
           'web_service']

# %% ../01_api.ipynb 5
# Imports required for package
from .core import Card, PingMe, set_env_variables

# %% ../01_api.ipynb 8
import os
set_env_variables(os.environ.get("PINGME_CONFIG_PATH", None))

# %% ../01_api.ipynb 12
import json

PINGME_ENV_CARD_NAME = os.environ.get('PINGME_ENV_CARD_NAME',None)
PINGME_ENV_CARD_CONTEXT = json.loads(os.environ.get('PINGME_ENV_CARD_CONTEXT', '{}'))
PINGME_ENV_CARD_DIR = os.environ.get('PINGME_ENV_CARD_DIR', None)
PINGME_ENV_CARD_EXT = os.environ.get('PINGME_ENV_CARD_EXT', None)

# For reducing spam when doing dev work
SEND_EMAIL = True
SEND_WEBHOOK = True
SEND_LOGFILE = True

# %% ../01_api.ipynb 14
import uvicorn
from fastapi import FastAPI
from fastapi.testclient import TestClient

app = FastAPI()

@app.get("/")
async def read_main():
    # Using the default place as a information post
    return {"msg": "PingMe: please POST to /webhook or /email or /logfile}"}

# %% ../01_api.ipynb 16
from fastapi import HTTPException
@app.post("/webhook")
async def send_webhook(card: Card):
    try:
        notification = PingMe(card, PINGME_ENV_CARD_DIR, PINGME_ENV_CARD_EXT)
        response = notification.send_webhook()
    except Exception as e:
        raise HTTPException(status_code=404, detail="Error in getting or sending card")
    return response

# %% ../01_api.ipynb 18
from fastapi import HTTPException
@app.post("/email")
async def send_email(card: Card):
    try:
        notification = PingMe(card, PINGME_ENV_CARD_DIR, PINGME_ENV_CARD_EXT)
        response = notification.send_email()
    except Exception as e:
        raise HTTPException(status_code=404, detail=f"Error in getting or sending card {e}")
    return response

# %% ../01_api.ipynb 20
from fastapi import HTTPException
@app.post("/logfile")
async def send_logfile(card: Card):
    try:
        notification = PingMe(card, PINGME_ENV_CARD_EXT, PINGME_ENV_CARD_EXT)
        response = notification.send_logfile()
    except Exception as e:
        raise HTTPException(status_code=404, detail="Error in getting or sending card")
    return response

# %% ../01_api.ipynb 23
def web_service():
    uvicorn.run(app)
