[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "pingme",
    "section": "",
    "text": "To install notebook development environment run the following command: conda create env -p ./.venv --file conda.env.yml\nNOTE: this may not be the nbdev approach but leaving for now, pretty sure I use pip for envs.\n\n\nUsed for running the notebook in dev mode, not used in sections with #|export.\n\n\n\n\n set_env_variables (config_path)\n\n\n\n\n\nHere you can see included potential variables and their ENV variable names.\n\n\n\n\nIs used to send notifications to a webhook (designed for use with incoming webhooks), e-mail, and/or a log file. The class stores a json payload which can have variables for replacement denoted by ${key_name}. A payload_context is passed to replace all variables in the payload. As the most common use will be to send a message with a Title/Subject and Text/Body these can be optionally passed and will work with the default_card.json template. For card info and designs see here.\n\n\n\n\n\n Card (name:str, context:dict)\n\nCreate a new model by parsing and validating input data from keyword arguments.\n\ndefault_card = Card(name=PINGME_ENV_CARD_NAME, context=PINGME_ENV_CARD_CONTEXT)\nprint(default_card)\n\n\n\n\n\n\n PingMe (card:__main__.Card, card_dir:pathlib.Path, card_ext:str='.yaml')\n\nPingMe class which notifies via either a webhook or email\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncard\nCard\n\nCard object\n\n\ncard_dir\nPath\n\nDirectory to look for cards in\n\n\ncard_ext\nstr\n.yaml\nExtension of card file\n\n\n\nFunctionality to resolve the payload, which means changing the variables and returning it as a str instead of a json object.\n\n\n\n\n\n resolved_payload (payload:<module'json'from'/opt/hostedtoolcache/Python/3\n                   .10.6/x64/lib/python3.10/json/__init__.py'>,\n                   context:dict)\n\nResolves the payload by substituting variables in the payload with values from the context and ensures all variables are accounted for\nCheck the notification object loading with defaults and the contents of it\n\nnotification = PingMe(card=default_card, card_dir=PINGME_ENV_CARD_DIR, card_ext=PINGME_ENV_CARD_EXT)\nnotification\n\nFunctionality to send the resolved_payload to a webhook, its split from the class method for the sake of testing.\n\n\n\n\n\n send_to_webhook (url:str, payload:<module'json'from'/opt/hostedtoolcache/\n                  Python/3.10.6/x64/lib/python3.10/json/__init__.py'>, hea\n                  der:<module'json'from'/opt/hostedtoolcache/Python/3.10.6\n                  /x64/lib/python3.10/json/__init__.py'>={'Content-\n                  Type':'application/json'})\n\n\n# Test it fails with a bad url\nwith fastcore.test.ExceptionExpected(): send_to_webhook(\"https://badhost\", notification.payload)\n\n\n\n\n\n PingMe.send_webhook ()\n\nBasic tests\nIf there’s an error with this please check if you have a valid WEBHOOK_URL in the config.\n\n# Note this test will send a request out\nif SEND_WEBHOOK:\n    fastcore.test.test_eq({\"status_code\": 200, \"response\": '1'}, notification.send_webhook())\n\nFunctionality to send the resolved_payload to an e-mail address\n\n\n\n\n\n\n send_to_email (payload:<module'json'from'/opt/hostedtoolcache/Python/3.10\n                .6/x64/lib/python3.10/json/__init__.py'>, subject:str,\n                from_:str, to:str, host:str, port:int=25, user=None,\n                password=None)\n\n\n# Test if not provided a proper smtp host\nwith fastcore.test.ExceptionExpected(): send_to_email(\n    notification.payload,\n    notification.title,\n    notification.email[\"from\"],\n    notification.email[\"to\"],\n    \"https://badhost\",\n    notification.email[\"smtp\"][\"port\"],\n    notification.email[\"smtp\"][\"user\"],\n    notification.email[\"smtp\"][\"password\"])\n\n\n\n\n\n PingMe.send_email ()\n\nIf there’s error’s here please check the type of error. ConnectionRefusedError indicates there’s issues with connecting to the SMTP email server.\n\nif SEND_EMAIL:\n    fastcore.test.test_eq({\"status_code\": 200, \"response\": True}, notification.send_email())\n\nBasic test\n!|hide The send_to_logfile function right now only sends a title and text, along with a timestamp. This is based off the default card. Some better solution should be found for this in the future. The goal is to not send raw json to the log file as it wont be readable. Perhaps storing each file in a folder and then logging the date and link to file?\n\n\n\n\n\n\n send_to_logfile (logfile:str, title:str, text:str)\n\nSend message to logfile\n\n\n\n\n PingMe.send_logfile ()\n\n\nprint(notification.logfile[\"path\"])\nif SEND_LOGFILE:\n    notification.send_logfile()\n\n\n# Test if not provided a proper log file\nwith fastcore.test.ExceptionExpected(): send_to_log_file(None, notification.title, notification.text)\n\n\n\n\n\n\n cli (context:str, webhook:bool, email:bool, logfile:bool, example:bool,\n      config_file:str=None, card_name:str='default',\n      card_dir:str='./cards/', card_ext:str='.yaml')\n\nPingMe send a notification to a webhook, email, or log file.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncontext\nstr\n\nstring denoting a json object with context variables (e.g. ‘{“title”:“Test Title”, “text”:“Test Text”}’)\n\n\nwebhook\nbool\n\nattempts to send to webhook\n\n\nemail\nbool\n\nattempts to send to email\n\n\nlogfile\nbool\n\nattempts to send to logfile\n\n\nexample\nbool\n\nRuns with example params, if it doesn’t work config values haven’t been set properly\n\n\nconfig_file\nstr\nNone\nconfig file to set env vars from\n\n\ncard_name\nstr\ndefault\nName of the card which matches a card found in {PROJECTDIR}/cards/{CARDNAME}.yaml\n\n\ncard_dir\nstr\n./cards/\nDirectory where cards are stored\n\n\ncard_ext\nstr\n.yaml\nExtension of card files\n\n\n\nTest CLI by calling it as a function, should also export and run from command line to check as well.\n\ncli(config_file=os.environ.get(\"PINGME_CONFIG_PATH\"), context='{\"title\":\"Test\", \"text\":\"This is a test\"}', webhook=True, email=True, logfile=True, example=False)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project name here",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Project name here",
    "section": "Install",
    "text": "Install\npip install your_project_name"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Project name here",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1"
  },
  {
    "objectID": "api.html",
    "href": "api.html",
    "title": "pingme",
    "section": "",
    "text": "To install notebook development environment run the following command: conda create env -p ./.venv --file conda.env.yml\nIncluded libraries\n\n\nHere you can see included potential variables and their ENV variable names.\nUsed the FastAPI Notebook as a starting point to see how to run commands within Jupyter, then looked into running the service inside the notebook which worked but you couldn’t get passed the cell. So I ended up using the test client which makes sense\n\n\n\n\n read_main ()\n\n\nclient = TestClient(app)\nresponse = client.get(\"/\")\nprint(response.status_code, response.json())\n\n\n\n\n\n\n send_webhook (card:pingme.core.Card)\n\n\nclient = TestClient(app)\nresponse = client.post(\"/webhook\", json={\"name\":\"default\", \"context\":{\"title\":\"Title here\", \"text\":\"Text here\"}})\nprint(response.json())\n\n\n\n\n\n\n send_email (card:pingme.core.Card)\n\n\nclient = TestClient(app)\nresponse = client.post(\"/email\", json={\"name\":\"default\", \"context\":{\"title\":\"Title here\", \"text\":\"Text here\"}})\nprint(response.json())\n\n\n\n\n\n\n send_logfile (card:pingme.core.Card)\n\n\nclient = TestClient(app)\nresponse = client.post(\"/logfile\", json={\"name\":\"default\", \"context\":{\"title\":\"Title here\", \"text\":\"Text here\"}})\nprint(response.json())\n\nFor running the web service\n\n\n\n\n\n web_service ()"
  }
]